#+Title: Pane

Code for managing panes, which each have an associated buffer.

Want to be able to say:

- draw this buffer on this pane
- draw this pane on this screen

Different panes should be able to:

- navigate to different places in the buffer
- have different sizes
- be positioned by their parent (probably a separate Window object?)

I like the idea of drawing on a pane being a function that's basically draw :: Buffer -> Pane -> [Line], where the lines are what should be drawn. I'm a little worried about doing a lot of work between the buffer and the screen for no reason, and slowing the whole thing down.

Questions to ask:

- What's the ideal format/structure for the parent to receive in order to combine panes onto the screen?
  - Will be plopping it all into an append buffer, so just need to be able to memcpy it into place.
  - Readonly view (keeping wrapping, rendering on the buffer side) (?)
    -> So probably a linked list of pointers to characters in original lines to start at, and a number of characters to read. Pane should make sure this is a safe number of characters to read â€“ parent will append blanks as needed.
    => Buffer -> Pane -> [(String, Width)]
- What's the ideal format/structure for a pane to get from a buffer?
  - Linked list of lines, starting at (bufferCursor - paneCursor)
  -> Buffers need a function: lines :: RelativeIndex -> LinkedList[Line]

* Header
  #+begin_src C :tangle ../tangled/pane.h :mkdirp yes :main no
    #pragma once
    #include "fileData.h"
    #include "lists/PaneRow.h"
    #include "zipperBuffer.h"

    /**
     * Rectangular area onscreen, with a cursor. Note that the cursor counts screen
     * spaces, and so must e.g. convert tabs to spaces.
     *
     * cursorX: x-position of the screen cursor, relative to the pane. Leftmost is 0.
     * cursorY: y-position of the screen cursor, relative to the pane. Topmost is 0.
     * top: top of pane starts this many lines from the top of the buffer
     * left: left of pane starts this many characters from the left of the
     *   buffer
     */
    typedef struct Pane {
      int cursorX;
      int cursorY;
      int top;
      int left;
      FileData *file;
    } Pane;

    Pane *makePane(int cursorX, int cursorY, int top, int left, FileData *file);

    typedef struct PaneRow {
      char *row;
      int width;
      /** The number of blanks needed to the right of the line. */
      int blanks;
    } PaneRow;

    PaneRow *makePaneRow(char *row, int width, unsigned int blanks);

    PaneRow *drawStatusBar(Pane *p, int width);

    List(PaneRow) *paneDraw(Pane *p, int *height, int *width);

    List(PaneRow) *drawRow(int left, int width, EditorRow *r);
  #+end_src
* Body
  #+begin_src C :tangle ../tangled/pane.c :main no
    #include "editorRow.h"
    #include "lists/PaneRow.h"
    #include "pane.h"
    #include "util.h"
    #include "zipperBuffer.h"

    Pane *makePane(int cursorX, int cursorY, int top, int left, FileData *file) {
      Pane *p = malloc(sizeof(Pane));
      p->cursorX = cursorX;
      p->cursorY = cursorY;
      p->top = top;
      p->left = left;
      p->file = file;
      return p;
    }

    List(PaneRow) *drawRow(int left, int width, EditorRow *r) {
      int x = clip(left, 0, r->renderSize);
      int resultWidth = clip(r->renderSize - x, 0, width);
      unsigned int blanks = width - resultWidth;
      return ListF(PaneRow).cons(makePaneRow(r->renderChars + x, resultWidth, blanks), NULL);
    }

    List(PaneRow) *drawPane(int height, int left, int width, PaneRow *status, RowList *rows) {
      if (rows == NULL || height <= 0) {
        return NULL;
      } else if (height == 1) {
        return ListF(PaneRow).cons(status, NULL);
      }
      List(PaneRow) *head = drawRow(left, width, rows->head);
      List(PaneRow) *tail = drawPane(height - 1, left, width, status, rows->tail);
      head->tail = tail;
      return head;
    }

    List(PaneRow) *paneDraw(Pane *p, int *height, int *width) {
      RowList *rows = zipperRowsFrom(p->file->buffer, p->file->cursorY, p->top);
      return drawPane(*height, p->left, *width, drawStatusBar(p, *width), rows);
    }

    PaneRow *drawStatusBar(Pane *p, int width) {
      char *status = malloc(width + 1);
      int leftLength = snprintf(
        status,
        width + 1,
        "\"%.20s\" - %d lines %s",
        p->file->filename ? p->file->filename : "[No name]",
        p->file->numberOfRows,
        p->file->unsavedChanges ? "(modified)" : ""
      );
      char *rightStatus = malloc(width + 1);
      int rightLength = snprintf(
        rightStatus,
        width + 1,
        "%d/%d",
        p->cursorY + 1,
        p->file->numberOfRows
      );
      int numberOfBlanks = width - (leftLength + rightLength);
      for (int i = leftLength; i < leftLength + numberOfBlanks; i++) {
        status[i] = ' ';
      }
      snprintf(
        status + leftLength + numberOfBlanks,
        rightLength + 1,
        "%s",
        rightStatus
      );
      free(rightStatus);
      return makePaneRow(status, width, 0);
    }

    PaneRow *makePaneRow(char *row, int width, unsigned int blanks) {
      PaneRow *r = malloc(sizeof(PaneRow));
      r->row = row;
      r->width = width;
      r->blanks = blanks;
      return r;
    }
  #+end_src
