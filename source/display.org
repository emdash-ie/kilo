#+TITLE: Display

Code for managing a number of panes and drawing them to the screen.

* Overview

A display is a collection of panes, split into columns and rows: each column contains some number of rows, and each row contains some number of panes. At the root, a display contains one column, as well as a width and height.

#+name: displayRow-definition
#+begin_src C
  typedef struct DisplayRow DisplayRow;
  typedef struct DisplayColumn DisplayColumn;
  typedef struct Display Display;

  struct Display {
    DisplayColumn *panes;
    int height;
    int width;
  };
#+end_src

The columns and rows are structured as linked list zippers, with the active row and pane separated from those above and below.

#+name: displayColumn-definition
#+begin_src C
  struct DisplayColumn {
    List(DisplayRow) *up;
    DisplayRow *active;
    List(DisplayRow) *down;
  };

  struct DisplayRow {
    List(Pane) *left;
    Pane *active;
    List(Pane) *right;
  };
#+end_src

There are also some convenience functions for creating ~DisplayColumns~ and ~DisplayRows~:

#+name: makeDisplayRow
#+begin_src C
  DisplayRow *makeDisplayRow(List(Pane) *l, Pane *a, List(Pane) *r);
  DisplayColumn *makeDisplayColumn(
    List(DisplayRow) *u, DisplayRow *a, List(DisplayRow) *d
  );
#+end_src

* Header

#+begin_src C :tangle ../tangled/display.h :mkdirp yes :noweb yes :main no
  #pragma once

  #include "lists/DisplayRow-int-int-ListListPaneRow.h"
  #include "lists/DisplayRow.h"
  #include "lists/ListListPaneRow.h"
  #include "lists/ListPaneRow.h"
  #include "lists/Pane-ListPaneRow.h"
  #include "lists/Pane-int-int-ListPaneRow.h"
  #include "lists/Pane.h"
  #include "lists/int.h"
  #include "pane.h"

  <<displayRow-definition>>
  <<displayColumn-definition>>

  <<makeDisplayRow>>

  typedef struct ScreenCursor {
    int x;
    int y;
  } ScreenCursor;

  int paneListSize(List(Pane) * ps);
  int columnListSize(List(DisplayRow) * ps);
  int displayColumnSize(DisplayColumn *row);
  int displayRowSize(DisplayRow *row);
  List(List(PaneRow)) * drawDisplayRow(DisplayRow *row, int *height, int *width);

  Pane *activePane(Display *d);
  int activeHeight(Display *d);
  int activeWidth(Display *d);
  ScreenCursor activeCursor(Display *d);

  List(List(List(PaneRow))) *drawDisplayColumn(DisplayColumn *column, int height, int width);
#+end_src

* Body
#+begin_src C :tangle ../tangled/display.c :mkdirp yes :main no
  #include "display.h"

  DisplayColumn *makeDisplayColumn(
                                   List(DisplayRow) *u, DisplayRow *a, List(DisplayRow) *d
                                   ) {
    DisplayColumn *column = malloc(sizeof(DisplayColumn));
    column->up = u;
    column->active = a;
    column->down = d;
    return column;
  }

  DisplayRow *makeDisplayRow(List(Pane) *l, Pane *a, List(Pane) *r) {
    DisplayRow *row = malloc(sizeof(DisplayRow));
    row->left = l;
    row->active = a;
    row->right = r;
    return row;
  }

  Pane *activePane(Display *d) {
    return d->panes->active->active;
  }

  int activeHeight(Display *d) {
    return d->height / displayColumnSize(d->panes);
  }

  int activeWidth(Display *d) {
    return d->width / displayRowSize(d->panes->active);
  }

  ScreenCursor activeCursor(Display *d) {
    int columnUnitSize = d->height / displayColumnSize(d->panes);
    int columnOffset = columnUnitSize * ListF(DisplayRow).length(d->panes->up);
    int rowUnitSize = d->width / displayRowSize(d->panes->active);
    int rowOffset = rowUnitSize * ListF(Pane).length(d->panes->active->left);
    return (ScreenCursor){
      rowOffset + activePane(d)->cursorX + 1,
      columnOffset + activePane(d)->cursorY + 1
    };
  }

  List(List(List(PaneRow))) *drawDisplayColumn(DisplayColumn *column, int height, int width) {
    int n = displayColumnSize(column);
    int *eachHeight = malloc(sizeof(int));
    ,*eachHeight = height / n;
    int *firstHeight = malloc(sizeof(int));
    ,*firstHeight = height - ((n - 1) * *eachHeight);
    List(int) *heights =
      ListF(int).cons(firstHeight, ListF(int).cons(eachHeight, NULL));
    heights->tail->tail = heights->tail;
    int *eachWidth = malloc(sizeof(int));
    ,*eachWidth = width;
    List(int) *widths = ListF(int).cons(eachWidth, NULL);
    widths->tail = widths;
    List(DisplayRow) *top = ListF(DisplayRow).reverse(column->up);
    List(DisplayRow) *rows = ListF(DisplayRow).concat(
      top,
      ListF(DisplayRow).cons(column->active, column->down)
    );
    List(List(List(PaneRow))) *result = ListF4(DisplayRow, int, int, List(List(PaneRow)))
      .zipWith(drawDisplayRow, rows, heights, widths);

    free(heights->tail);
    free(heights);
    free(widths);
    free(eachHeight);
    free(firstHeight);
    free(eachWidth);
    ListF(DisplayRow).free(top);
    ListF(DisplayRow).freeUntil(rows, column->down);

    return result;
  }

  List(List(PaneRow)) *drawDisplayRow(DisplayRow *row, int *height, int *width) {
    List(Pane) *above = ListF(Pane).reverse(row->left);
    List(Pane) *panes =
      ListF(Pane).concat(above, ListF(Pane).cons(row->active, row->right));
    int n = ListF(Pane).length(panes);
    int *eachWidth = malloc(sizeof(int));
    *eachWidth = *width / n;
    List(int) *widths = ListF(int).cons(eachWidth, NULL);
    widths->tail = widths;
    List(int) *heights = ListF(int).cons(height, NULL);
    heights->tail = heights;
    List(List(PaneRow)) *result =
      ListF4(Pane, int, int, List(PaneRow))
      .zipWith(paneDraw, panes, heights, widths);

    free(heights);
    free(widths);
    free(eachWidth);
    ListF(Pane).free(above);
    ListF(Pane).freeUntil(panes, row->right);

    return result;
  }

  int displayColumnSize(DisplayColumn *column) {
    if (column == NULL) {
      return 0;
    } else {
      return 1 + ListF(DisplayRow).length(column->up)
        + ListF(DisplayRow).length(column->down);
    }
  }

  int displayRowSize(DisplayRow *row) {
    if (row == NULL) {
      return 0;
    } else {
      return 1 + ListF(Pane).length(row->left) +
        ListF(Pane).length(row->right);
    }
  }
#+end_src

# Local Variables:
# c-file-style: gnu
# End:
