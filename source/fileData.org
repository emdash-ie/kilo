#+TITLE: FileData

Code for managing files.

* Header
  #+begin_src C :tangle ../tangled/fileData.h :mkdirp yes
    #pragma once
    #include <stdbool.h>

    #include "undo.h"
    #include "zipperBuffer.h"

    /**
     * Data the editor needs for each open file. I should probably call this a
     * ~Buffer~.
     *
     * cursorX, cursorY: Position of the cursor within the file in characters.
     *   10, 42 is the 11th line from the top, 43rd column from the left
     * numberOfRows: Number of lines in the file.
     * buffer: The underlying file buffer.
     * filename: Full path of the file.
     * unsavedChanges: How many changes have been made since the last save.
     * undo, redo: The undo and redo data for the file.
     */
    typedef struct FileData {
      int cursorX, cursorY;
      int numberOfRows;
      ZipperBuffer *buffer;
      char *filename;
      int unsavedChanges;
      UndoStack *undo;
      UndoStack *redo;
    } FileData;

    FileData *fileData(int cursorX, int cursorY, int numberOfRows,
                       ZipperBuffer *buffer, char *filename, int unsavedChanges,
                       UndoStack *undo, UndoStack *redo);

    enum OperationResultType { Success, Failure };

    /**
     * Empty on success, error message on failure.
     */
    typedef struct OperationResult {
      enum OperationResultType type;
      char *errorMessage;
    } OperationResult;

    bool isSuccess(OperationResult *result);

    OperationResult *failure(char *message);

    OperationResult success;

    void onFailure(OperationResult *result, void (*f)(const char *, ...));

    void editorPushRedo(
      ZipperBuffer *buffer,
      UndoStack **redo,
      int cursorX,
      int cursorY
    );

    void editorPushUndo(
      ZipperBuffer *buffer,
      UndoStack **undo,
      int cursorX,
      int cursorY
    );

    OperationResult *editorUndo(FileData *file);

    OperationResult *editorRedo(FileData *file);
  #+end_src
* Body
  #+begin_src C :tangle ../tangled/fileData.c :mkdir yes
    #include "fileData.h"
    #include <stdlib.h>

    FileData *fileData(int cursorX, int cursorY, int numberOfRows,
                       ZipperBuffer *buffer, char *filename, int unsavedChanges,
                       UndoStack *undo, UndoStack *redo) {
      FileData *fd = malloc(sizeof(FileData));
      fd->cursorX = cursorX;
      fd->cursorY = cursorY;
      fd->numberOfRows = numberOfRows;
      fd->buffer = buffer;
      fd->filename = filename;
      fd->unsavedChanges = unsavedChanges;
      fd->undo = undo;
      fd->redo = redo;
      return fd;
    }

    bool isSuccess(OperationResult *result) {
      if (result->type == Success) {
        return true;
      } else {
        return false;
      }
    }

    OperationResult *failure(char *message) {
      OperationResult *result = malloc(sizeof(OperationResult));
      result->type = Failure;
      result->errorMessage = message;
      return result;
    }

    OperationResult success = {.type = Success, .errorMessage = ""};

    void onFailure(OperationResult *result, void (*f)(const char *, ...)) {
      if (!isSuccess(result)) {
        f(result->errorMessage);
        free(result);
      }
    }

    void editorPushRedo(
      ZipperBuffer *buffer,
      UndoStack **redo,
      int cursorX,
      int cursorY
    ) {
      *redo = undoCons(buffer->forwards, buffer->backwards, cursorX, cursorY, *redo);
    }

    void editorPushUndo(
      ZipperBuffer *buffer,
      UndoStack **undo,
      int cursorX,
      int cursorY
    ) {
      zipperUpdateNewest(buffer);
      *undo = undoCons(buffer->forwards, buffer->backwards, cursorX, cursorY, *undo);
    }

    OperationResult *editorUndo(FileData *file) {
      if (file->undo == NULL) {
        return failure("No further undo steps.");
      }
      editorPushRedo(file->buffer, &file->redo, file->cursorX, file->cursorY);
      UndoStack *oldUndo = file->undo;
      file->buffer->forwards = oldUndo->forwards;
      file->buffer->backwards = oldUndo->backwards;
      file->cursorX = oldUndo->cursorX;
      file->cursorY = oldUndo->cursorY;
      file->undo = oldUndo->tail;
      free(oldUndo);
      return &success;
    }

    OperationResult *editorRedo(FileData *file) {
      if (file->redo == NULL) {
        return failure("No further redo steps.");
      }
      editorPushUndo(file->buffer, &file->undo, file->cursorX, file->cursorY);
      UndoStack *oldRedo = file->redo;
      file->buffer->forwards = oldRedo->forwards;
      file->buffer->backwards = oldRedo->backwards;
      file->cursorX = oldRedo->cursorX;
      file->cursorY = oldRedo->cursorY;
      file->redo = oldRedo->tail;
      free(oldRedo);
      return &success;
    }
  #+end_src
